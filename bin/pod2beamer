#!/usr/bin/perl
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
	if $running_under_some_shell;

# pod2latex conversion program

use strict;
use Pod::LaTeX;
use Pod::Find qw/ pod_find /;
use Pod::Usage;
use Getopt::Long;
use File::Basename;
use Symbol;

BEGIN {
    package Pod::LaTeX;

    my $cmd_orig = \&Pod::LaTeX::command;

    local *command = sub {
        # encoding POD command is unsupported on Pod::LaTeX
        return if $_[1] eq 'encoding';
        goto $cmd_orig;
    }
}

my $VERSION = "1.01";

# return the entire contents of a text file
# whose name is given as argument
sub _get {
    my $fn = shift;
    my $infh = gensym;
    open $infh, $fn
        or die "Could not open file $fn: $!\n";
    local $/;
    return <$infh>;
}

# Read command line arguments

my %options = (
	       "help"   => 0,
	       "man"    => 0,
	       #"sections" => [],
	       "sections" => [ 'PRESENTACIONS/.+' ],
	       #"full"   => 0,
	       "full"   => 1,
	       "verbose" => 0,
	       "modify" => 0,
	       #"h1level" => 1,  # section is equivalent to H1
	       "h1level" => 0,  # section is equivalent to H1
	       #"preamble" => [],
	       "preamble" => [ _get('doc/preamble.tex') ],
	       #"postamble" => [],
	       "postamble" => [ _get('doc/postamble.tex') ],
	      );
# "prefile" is just like "preamble", but the argument 
# comes from the file named by the argument
$options{"prefile"} = sub { shift; push @{$options{"preamble"}}, _get(shift) };
# the same between "postfile" and "postamble"
$options{"postfile"} = sub { shift; push @{$options{"postamble"}}, _get(shift) };

GetOptions(\%options, 
	   "help",
	   "man",
	   "verbose",
	   "full",
	   "sections=s@",
	   "modify",
	   "h1level=i",
	   "preamble=s@",
	   "postamble=s@",
	   "prefile=s", 
	   "postfile=s"
	  ) || pod2usage(2);

pod2usage(1)  if ($options{help});
pod2usage(-verbose => 2)  if ($options{man});


# Read all the files from the command line
my @files = @ARGV;

# Now find which ones are real pods and convert 
# directories to their contents.

# Extract the pods from each arg since some of them might
# be directories
# This is not as efficient as using pod_find to search through
# everything at once but it allows us to preserve the order 
# supplied by the user

my @pods;
foreach my $arg (@files) {
  my %pods = pod_find($arg);
  push(@pods, sort keys %pods);
}

# Abort if nothing to do
if ($#pods == -1) {
  warn "None of the supplied Pod files actually exist\n";
  exit;
}

# Only want to override the preamble and postamble if we have
# been given values.
my %User;
$User{UserPreamble} = join("\n", @{$options{'preamble'}})
  if ($options{preamble} && @{$options{preamble}});
$User{UserPostamble} = join("\n", @{$options{'postamble'}})
  if ($options{postamble} && @{$options{postamble}});

# Flag to indicate whether we have converted at least one file
# indicates how many files have been converted
my $converted = 0;

# Loop over the input files
foreach my $pod (@pods) {

  if (-f $pod) {

    warn "Converting $pod\n" if $options{'verbose'};

    # Open the file (need the handle)
    # Use auto-vivified handle in perl 5.6
    my $podfh = gensym;
    open ($podfh, "<$pod") || die "Could not open pod file $pod: $!\n";

    # if this is the first file to be converted we may want to add
    # a preamble (controlled by command line option)
    my $preamble = 0;
    $preamble = 1 if ($converted == 0 && $options{'full'});

    # if this is the last file to be converted may want to add
    # a postamble (controlled by command line option)
    # relies on a previous pass to check existence of all pods we
    # are converting.
    my $postamble = ( ($converted == $#pods && $options{'full'}) ? 1 : 0 );

    # Open parser object
    # May want to start with a preamble for the first one and
    # end with an index for the last
    my $parser = new Pod::LaTeX(
      MakeIndex => $options{'full'},
      TableOfContents => $preamble,
      ReplaceNAMEwithSection => $options{'modify'},
      UniqueLabels => $options{'modify'},
      StartWithNewPage => $options{'full'},
      AddPreamble => $preamble,
      AddPostamble => $postamble,
      Head1Level => $options{'h1level'},
      LevelNoNum => $options{'h1level'} + 1,
      %User
    );

    # Store the file name for error messages
    # This is a kluge that breaks the data hiding of the object
    $parser->{_INFILE} = $pod;

    # Select sections if supplied
    $parser->select(@{ $options{'sections'}})
      if @{$options{'sections'}};

    # Parse it
    $parser->parse_from_filehandle($podfh);

    # We have converted at least one file
    $converted++;

  } else {
    warn "File $pod not found\n";
  }

}

# If verbose
warn "Converted $converted files\n" if $options{'verbose'};

exit;

__END__

=head1 NAME

pod2beamer - convert pod documentation to latex-beamer slides

=head1 SYNOPSIS

  pod2beamer *.pm > file.tex

  pod2beamer -full -sections 'DESCRIPTION|NAME' SomeDir > file.tex

  pod2beamer -prefile h.tex -postfile t.tex my.pod > file.tex

=head1 DESCRIPTION

C<pod2beamer> is a program to convert POD format documentation
(L<perlpod>) into latex-beamer slides. It processes multiple input
documents at a time and generates a single combined output to
the standard out.

=head1 OPTIONS AND ARGUMENTS

This section describes the supported command line options. Minimum
matching is supported.

=over 4

=item B<-full>

Creates a complete C<latex> file that can be processed immediately
(unless C<=for/=begin> directives are used that rely on extra packages).
Table of contents and index generation commands are included in the
wrapper C<latex> code.

=item B<-sections>

Specify pod sections to include (or remove if negated) in the
translation.  See L<Pod::Select/"SECTION SPECIFICATIONS"> for the
format to use for I<section-spec>. This option may be given multiple
times on the command line.This is identical to the similar option in
the C<podselect()> command.

=item B<-modify>

This option causes the output C<latex> to be slightly
modified from the input pod such that when a C<=head1 NAME>
is encountered a section is created containing the actual
pod name (rather than B<NAME>) and all subsequent C<=head1>
directives are treated as subsections. This has the advantage
that the description of a module will be in its own section
which is helpful for including module descriptions in documentation.
Also forces C<latex> label and index entries to be prefixed by the
name of the module.

=item B<-h1level>

Specifies the C<latex> section that is equivalent to a C<H1> pod
directive. This is an integer between 0 and 5 with 0 equivalent to a
C<latex> chapter, 1 equivalent to a C<latex> section etc. The default
is 1 (C<H1> equivalent to a latex section).

=item B<-help>

Print a brief help message and exit.

=item B<-man>

Print the manual page and exit.

=item B<-verbose>

Print information messages as each document is processed.

=item B<-preamble>

A user-supplied preamble for the LaTeX code. Multiple values
are supported and appended in order separated by "\n".
See B<-prefile> for reading the preamble from a file.

=item B<-postamble>

A user supplied postamble for the LaTeX code. Multiple values
are supported and appended in order separated by "\n".
See B<-postfile> for reading the postamble from a file.

=item B<-prefile>

A user-supplied preamble for the LaTeX code to be read from the
named file. Multiple values are supported and appended in
order. See B<-preamble>.

=item B<-postfile>

A user-supplied postamble for the LaTeX code to be read from the
named file. Multiple values are supported and appended in
order. See B<-postamble>.

=back

=head1 BUGS

See BUGS section on C<pod2latex>.

=head1 SEE ALSO

This code is strongly based on C<pod2latex>.

L<pod2latex>, L<Pod::LaTeX>

=head1 AUTHOR

Alex Muntada E<lt>alexm at cpan dot orgE<gt>

This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.

Copyright (C) 2009 Alex Muntada. All Rights Reserved.

=cut

